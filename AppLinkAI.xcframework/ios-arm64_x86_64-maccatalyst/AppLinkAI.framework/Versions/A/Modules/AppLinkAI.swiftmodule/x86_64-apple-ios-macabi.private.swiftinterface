// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AppLinkAI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import AppLinkAI
import Foundation
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: AppLinkAI.KeychainSwiftAccessOptions, b: AppLinkAI.KeychainSwiftAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class AppLink : ObjectiveC.NSObject {
  @objc public static let SourceUrlKey: Swift.String
  @objc public static let SourceUrlPathKey: Swift.String
  @objc public static let SourceUrlQueryParamsKey: Swift.String
  @objc public static let IsFirstSessionKey: Swift.String
  public typealias DeeplinkHandler = (_ params: [Swift.String : Any]?, _ error: (any Swift.Error)?) -> Swift.Void
  @objc public static let shared: AppLinkAI.AppLink
  @objc public func initialize(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, isTestMode: Swift.Bool = false, deeplinkHandler: AppLinkAI.AppLink.DeeplinkHandler?)
  @discardableResult
  @objc(continueUserActivity:) public func `continue`(_ activity: Foundation.NSUserActivity) -> Swift.Bool
  @objc public func reset()
  @objc @discardableResult
  public func handleDeepLink(_ url: Foundation.URL) -> Swift.Bool
  @objc deinit
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: AppLinkAI.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: AppLinkAI.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: AppLinkAI.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
extension AppLinkAI.KeychainSwiftAccessOptions : Swift.Equatable {}
extension AppLinkAI.KeychainSwiftAccessOptions : Swift.Hashable {}
